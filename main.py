# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from fastapi import FastAPI, HTTPException, Request  # FastAPI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API, HTTPException –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
from pydantic import BaseModel, EmailStr  # BaseModel –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, EmailStr –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
import pymysql  # –î–ª—è —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from typing import Dict  # –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è
from fastapi.middleware.cors import CORSMiddleware  # Middleware –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
from enum import Enum  # Enum –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
import random  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
import uvicorn  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from db_connection import (
    get_dict_users, save_user, change_db_users, get_leaderboard, verify_password,
    hash_password, validate_password
)
from jose import jwt, JWTError
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ API
# origins - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¥–æ–º–µ–Ω–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API
# "*" - —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    allow_credentials=True,  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É cookies
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ—Ö HTTP-–º–µ—Ç–æ–¥–æ–≤ (GET, POST, PUT, DELETE –∏ —Ç.–¥.)
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECRET_KEY = "your-secret-key-here"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
LOGIN_ATTEMPTS_LIMIT = 5
LOGIN_BLOCK_TIME_MINUTES = 15

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ –∫–ª—é—á - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# users: Dict[str, dict] = {}
users = get_dict_users()
login_attempts = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
def generate_verification_code() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏, –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 6 —Ü–∏—Ñ—Ä.
    """
    code = f"{random.randint(0, 999999):06d}"  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 999999, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 6 —Ü–∏—Ñ—Ä
    return code


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
def print_verification_code(email: str, code: str):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
    """
    print("\n" + "‚ïê" * 50)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    print(f"üìß –ü–æ–ª—É—á–∞—Ç–µ–ª—å: \033[1;34m{email}\033[0m")  # Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω–∏–π —Ü–≤–µ—Ç)
    print(f"üî¢ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: \033[1;32m{code}\033[0m")  # –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç)
    print("‚ïê" * 50 + "\n")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def update_users():
    global users
    users = get_dict_users()


def check_nickname(nickname):
    for i in users:
        if nickname == i['nickname']:
            return True
    return False


# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class TokenData(BaseModel):
    email: str
    exp: datetime


class LoginRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥ (–ª–æ–≥–∏–Ω).
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    email: str
    password: str


class RegisterRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ EmailStr)
    - password: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - nickname: –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    email: EmailStr
    password: str
    nickname: str


class VerifyRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email.
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - code: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    email: EmailStr
    code: str


class RecoverRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    email: EmailStr


class RecoverVerifyRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - code: –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    email: EmailStr
    code: str


class ChangePasswordRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è.
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - code: –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    - password: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    """
    email: EmailStr
    code: str
    password: str


class CodeType(str, Enum):
    """
    –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–¥–æ–≤:
    - VERIFICATION: –ö–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
    - RECOVERY: –ö–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    """
    VERIFICATION = "verification"
    RECOVERY = "recovery"


class ResendCodeRequest(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞.
    –ü–æ–ª—è:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - code_type: –¢–∏–ø –∫–æ–¥–∞ (verification –∏–ª–∏ recovery)
    """
    email: EmailStr
    code_type: CodeType


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
def create_access_token(email: str) -> str:
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode = {"sub": email, "exp": expire}
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


def verify_token(token: str) -> TokenData:
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email = payload.get("sub")
        if email is None:
            raise JWTError("Invalid token payload")
        return TokenData(email=email, exp=payload.get("exp"))
    except JWTError:
        raise HTTPException(
            status_code=401,
            detail={"code": "invalid_token"},
            headers={"WWW-Authenticate": "Bearer"},
        )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
def check_login_attempts(email: str):
    if email in login_attempts:
        attempts, block_time = login_attempts[email]
        if datetime.utcnow() < block_time:
            raise HTTPException(
                status_code=429,
                detail={"code": ErrorCodes.TOO_MANY_ATTEMPTS},
                headers={"Retry-After": str((block_time - datetime.utcnow()).seconds)},
            )
        if attempts >= LOGIN_ATTEMPTS_LIMIT:
            login_attempts[email] = (attempts, datetime.utcnow() + timedelta(minutes=LOGIN_BLOCK_TIME_MINUTES))
            raise HTTPException(
                status_code=429,
                detail={"code": ErrorCodes.TOO_MANY_ATTEMPTS},
                headers={"Retry-After": str(LOGIN_BLOCK_TIME_MINUTES * 60)},
            )


# –ö–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
class ErrorCodes:
    """
    –ö–ª–∞—Å—Å —Å –∫–æ–¥–∞–º–∏ –æ—à–∏–±–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ API.
    """
    ALREADY_VERIFIED = 'already_verified'  # –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    SAVING_FAILED = 'saving_failed'  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å
    NOT_ONE_EMAIL = 'not_one_email'  # –°—É—â–µ—Å—Ç–≤—É—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ email
    USER_NOT_FOUND = "user_not_found"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    INVALID_CREDENTIALS = "invalid_credentials"  # –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    USER_EXISTS = "user_exists"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    NICKNAME_EXISTS = 'nickname_exist'  # –≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç
    INVALID_VERIFICATION_CODE = "invalid_verification_code"  # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    ACCOUNT_NOT_VERIFIED = "account_not_verified"  # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    PASSWORD_CHANGE_SUCCESS = "password_change_success"  # –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω
    VERIFICATION_CODE_SENT = "verification_code_sent"  # –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    REGISTRATION_SUCCESS = "registration_success"  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    VERIFICATION_SUCCESS = "verification_success"  # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    TOO_MANY_ATTEMPTS = "too_many_attempts"  # –ú–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞


@app.middleware("http")
async def auth_middleware(request: Request, call_next):
    if request.url.path in ["/auth/login", "/auth/register", "/auth/verify",
                            "/auth/recover", "/auth/recover/verify", "/docs", "/openapi.json"]:
        return await call_next(request)

    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        raise HTTPException(
            status_code=401,
            detail={"code": "missing_token"},
            headers={"WWW-Authenticate": "Bearer"},
        )

    token = auth_header.split(" ")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω
    try:
        token_data = verify_token(token)  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        request.state.user_email = token_data.email  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request.state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    except JWTError:
        raise HTTPException(
            status_code=401,
            detail={"code": "invalid_token"},
            headers={"WWW-Authenticate": "Bearer"},
        )

    return await call_next(request)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ (–ª–æ–≥–∏–Ω–∞)
@app.post("/auth/login")
def login(data: LoginRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç email, –ø–∞—Ä–æ–ª—å –∏ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    print(users)
    if data.email not in users:
        login_attempts[data.email] = (login_attempts.get(data.email, (0, datetime.min))[0] + 1, datetime.min)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        raise HTTPException(
            status_code=404,
            detail={"code": ErrorCodes.USER_NOT_FOUND}
        )

    user = users[data.email]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not verify_password(data.password, user["password"]):
        login_attempts[data.email] = (login_attempts.get(data.email, (0, datetime.min))[0] + 1, datetime.min)
        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 401
        raise HTTPException(
            status_code=401,
            detail={"code": ErrorCodes.INVALID_CREDENTIALS}
        )

    if not user["verified"]:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 403
        raise HTTPException(
            status_code=403,
            detail={"code": ErrorCodes.ACCOUNT_NOT_VERIFIED}
        )

    if data.email in login_attempts:
        del login_attempts[data.email]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return {"token": create_access_token(data.email)}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.post("/auth/register")
def register(data: RegisterRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    password_error = validate_password(data.password)
    if password_error:
        raise HTTPException(
            status_code=400,
            detail={"code": "invalid_password", "message": password_error}
        )

    if data.email in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400
        raise HTTPException(
            status_code=400,
            detail={"code": ErrorCodes.USER_EXISTS}
        )

    if check_nickname(data.nickname):
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400
        raise HTTPException(
            status_code=400,
            detail={"code": ErrorCodes.NICKNAME_EXISTS}
        )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_code = generate_verification_code()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    trace_back = save_user(data.email, data.password, data.nickname, False, verification_code)
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤
    update_users()
    # –í—ã–≤–æ–¥–∏–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print_verification_code(str(data.email), verification_code)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    return {
        "message": {"code": ErrorCodes.REGISTRATION_SUCCESS},
        "verification_code": verification_code  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
@app.post("/auth/verify")
def verify(data: VerifyRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç.
    """
    if data.email not in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        raise HTTPException(
            status_code=404,
            detail={"code": ErrorCodes.USER_NOT_FOUND}
        )
    user = users[data.email]

    if data.code != user["verification_code"]:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400
        raise HTTPException(
            status_code=400,
            detail={"code": ErrorCodes.INVALID_VERIFICATION_CODE}
        )
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
    trace_back = change_db_users(user['email'], (('verified', 1)))
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )
    update_users()
    return {
        "token": create_access_token(user['email']),
        "message": {"code": ErrorCodes.VERIFICATION_SUCCESS}
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
@app.post("/auth/recover")
def recover(data: RecoverRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ email.
    """

    if data.email not in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        raise HTTPException(
            status_code=404,
            detail={"code": ErrorCodes.USER_NOT_FOUND}
        )

    user = users[data.email]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    verification_code = generate_verification_code()
    trace_back = change_db_users(user['email'], (('verified', 1), ('password', data.password)))
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )

    update_users()
    # –í—ã–≤–æ–¥–∏–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print_verification_code(user['email'], verification_code)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞
    return {
        "message": {"code": ErrorCodes.VERIFICATION_CODE_SENT},
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
@app.post("/auth/recover/verify")
def recover_verify(data: RecoverVerifyRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    if data.email not in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        raise HTTPException(
            status_code=404,
            detail={"code": ErrorCodes.USER_NOT_FOUND}
        )
    user = users[data.email]
    if data.code != user["verification_code"]:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400
        raise HTTPException(
            status_code=400,
            detail={"code": ErrorCodes.INVALID_VERIFICATION_CODE}
        )
    trace_back = change_db_users(user['email'], (('verified', 1)))
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )
    update_users()
    return {"message": {"code": "recovery_verified"}}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
@app.post("/auth/recover/change")
def change_password(data: ChangePasswordRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å.
    """
    if data.email not in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        raise HTTPException(
            status_code=404,
            detail={"code": ErrorCodes.USER_NOT_FOUND}
        )
    user = users[data.email]
    if data.code != user["verification_code"]:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400
        raise HTTPException(
            status_code=400,
            detail={"code": ErrorCodes.INVALID_VERIFICATION_CODE}
        )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å verified
    trace_back = change_db_users(user['email'], (('verified', 1)))
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    trace_back = change_db_users(user['email'], (('password', data.password)))
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )
    update_users()
    return {
        "token": create_access_token(user['email']),
        "message": {"code": ErrorCodes.PASSWORD_CHANGE_SUCCESS}
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
@app.post("/auth/verify/resend")
def resend_code(data: ResendCodeRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ email.
    """
    if data.email not in users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 404
        raise HTTPException(
            status_code=404,
            detail={"code": ErrorCodes.USER_NOT_FOUND}
        )
    user = users[data.email]
    if data.code_type == CodeType.VERIFICATION:
        if user["verified"]:
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400
            raise HTTPException(
                status_code=400,
                detail={"code": ErrorCodes.ALREADY_VERIFIED}
            )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    new_code = generate_verification_code()
    trace_back = change_db_users(user['email'], (('verification_code', new_code)))
    if trace_back != 'success':
        raise HTTPException(
            # —Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            status_code=500,
            detail={"code": ErrorCodes.SAVING_FAILED}
        )

    update_users()
    # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print_verification_code(user['email'], new_code)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞
    return {
        "message": {"code": ErrorCodes.VERIFICATION_CODE_SENT},
    }


@app.get('/api/leaderboard')
def leaderboard():
    info = get_leaderboard(len(users))
    print(info)
    return info


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–µ 0.0.0.0 –∏ –ø–æ—Ä—Ç—É 8000
    uvicorn.run(app, host="0.0.0.0", port=8000)
